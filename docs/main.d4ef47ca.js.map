{"version":3,"sources":["main.js"],"names":["window","addEventListener","canvas","document","querySelector","uploadElm","getElementById","uploadedElm","uploadArea","closeBtn","swapBtn","defaultImage","beforeImage","beforeImageSwap","colorSizeElm","cluster","Cluster","e","showPreviewArea","changeHandler","callback","image","preview","preventDefault","data","dataTransfer","files","resetPreview","swapImage","reduce","Number","target","value","classList","contains","remove","add","run","src","restore","file","undefined","type","match","size","Image","fileReader","FileReader","onload","base64","result","readAsDataURL","__image","getContext","clearRect","width","height","ctx","drawImage","imagedata","getImageData","MedianCut","putImageData"],"mappings":"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","file":"main.d4ef47ca.js","sourceRoot":"../demo/src","sourcesContent":["window.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.querySelector(\"#canvas\");\n  const uploadElm = document.getElementById(\"upload\");\n  const uploadedElm = document.getElementById(\"uploaded\");\n  const uploadArea = document.getElementById(\"upload-area\");\n  const closeBtn = document.querySelector(\"#close\");\n  const swapBtn = document.querySelector(\"#swap\");\n  const defaultImage = document.getElementById(\"original-image\");\n  const beforeImage = document.querySelector(\"#beforeImage\");\n  const beforeImageSwap = document.querySelector(\"#beforeImageSwap\");\n  const colorSizeElm = document.querySelector(\"#colorSize\");\n\n  const cluster = new Cluster({ canvas });\n\n  uploadArea.addEventListener(\"change\", (e) => {\n    showPreviewArea();\n    changeHandler({\n      e,\n      callback: (image) => {\n        preview(image);\n      },\n    });\n  });\n  uploadArea.addEventListener(\"dragenter\", (e) => {\n    e.preventDefault();\n  });\n  uploadArea.addEventListener(\"dragover\", (e) => {\n    e.preventDefault();\n  });\n  uploadArea.addEventListener(\"dragleave\", (e) => {\n    e.preventDefault();\n  });\n  uploadArea.addEventListener(\"drop\", (e) => {\n    e.preventDefault();\n    showPreviewArea();\n    changeHandler({\n      e,\n      data: e.dataTransfer.files[0],\n      callback: (image) => {\n        preview(image);\n      },\n    });\n  });\n\n  closeBtn.addEventListener(\"click\", () => {\n    resetPreview(beforeImage);\n  });\n\n  swapBtn.addEventListener(\"click\", () => {\n    swapImage();\n  });\n\n  colorSizeElm.addEventListener(\"change\", (e) => {\n    cluster.reduce(Number(e.target.value));\n  });\n\n  const swapImage = () => {\n    if (canvas.classList.contains(\"hidden\")) {\n      canvas.classList.remove(\"hidden\");\n      beforeImageSwap.classList.add(\"hidden\");\n    } else {\n      canvas.classList.add(\"hidden\");\n      beforeImageSwap.classList.remove(\"hidden\");\n    }\n  };\n\n  const showPreviewArea = () => {\n    uploadElm.classList.add(\"hidden\");\n    uploadedElm.classList.remove(\"hidden\");\n  };\n\n  const hidePreviewArea = () => {\n    uploadElm.classList.remove(\"hidden\");\n    uploadedElm.classList.add(\"hidden\");\n  };\n\n  const preview = (image) => {\n    cluster.run(image, 4);\n    beforeImage.src = image.src;\n    beforeImageSwap.src = image.src;\n    showPreviewArea();\n  };\n\n  const resetPreview = () => {\n    cluster.restore();\n    beforeImage.src = \"\";\n    beforeImageSwap.src = \"\";\n    hidePreviewArea();\n  };\n\n  showPreviewArea();\n  defaultImage.addEventListener(\"load\", (image) => {\n    preview(defaultImage);\n  });\n});\n\nconst changeHandler = ({ e, data, callback }) => {\n  // drag and dropの場合は e.dataTransfer.files[0] を使用\n  let file = data === undefined ? e.target.files[0] : data;\n\n  // 拡張子チェック\n  if (!file.type.match(/^image\\/(png|jpg|jpeg|gif)$/)) {\n    return;\n  }\n\n  // 容量チェック(5MB)\n  if (5 * 1024 * 1024 <= file.size) {\n    return;\n  }\n\n  let image = new Image();\n  let fileReader = new FileReader();\n\n  fileReader.onload = (e) => {\n    let base64 = e.target.result;\n\n    image.onload = () => {\n      callback(image);\n    };\n    image.src = base64;\n  };\n\n  fileReader.readAsDataURL(file);\n};\n\nexport default class Cluster {\n  constructor({ canvas }) {\n    this.canvas = canvas;\n    this.__image = null;\n  }\n\n  restore() {\n    const ctx = this.canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  run(image, size = 2) {\n    this.__image = image;\n    this.canvas.width = image.width;\n    this.canvas.height = image.height;\n    const ctx = this.canvas.getContext(\"2d\");\n    ctx.drawImage(\n      image,\n      0,\n      0,\n      image.width,\n      image.height,\n      0,\n      0,\n      image.width,\n      image.height\n    );\n\n    let imagedata = ctx.getImageData(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height\n    );\n    let medianCut = new MedianCut(imagedata);\n    imagedata = medianCut.reduce(size);\n    ctx.putImageData(imagedata, 0, 0, 0, 0, imagedata.width, imagedata.height);\n  }\n\n  reduce(size = 2) {\n    const image = this.__image;\n    this.canvas.width = image.width;\n    this.canvas.height = image.height;\n    const ctx = this.canvas.getContext(\"2d\");\n    ctx.drawImage(\n      image,\n      0,\n      0,\n      image.width,\n      image.height,\n      0,\n      0,\n      image.width,\n      image.height\n    );\n\n    let imagedata = ctx.getImageData(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height\n    );\n    let medianCut = new MedianCut(imagedata);\n    imagedata = medianCut.reduce(size);\n    ctx.putImageData(imagedata, 0, 0, 0, 0, imagedata.width, imagedata.height);\n  }\n}\n"]}