{"version":3,"sources":["main.js"],"names":["worker","Worker","window","addEventListener","canvas","document","querySelector","uploadElm","getElementById","uploadedElm","uploadArea","closeBtn","swapBtn","defaultImage","beforeImage","beforeImageSwap","colorSizeElm","spinnerElm","cluster","Cluster","e","showPreviewArea","changeHandler","callback","image","preview","preventDefault","data","dataTransfer","files","resetPreview","swapImage","showSpinner","reduce","Number","target","value","classList","contains","remove","add","src","restore","response","draw","file","undefined","type","match","size","Image","fileReader","FileReader","onload","base64","result","readAsDataURL","__image","getContext","clearRect","width","height","ctx","drawImage","imageData","getImageData","postMessage","buffer","putImageData"],"mappings":"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","file":"main.1d545c2d.js","sourceRoot":"../demo/src","sourcesContent":["const worker = new Worker('worker.js');\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.querySelector(\"#canvas\");\n  const uploadElm = document.getElementById(\"upload\");\n  const uploadedElm = document.getElementById(\"uploaded\");\n  const uploadArea = document.getElementById(\"upload-area\");\n  const closeBtn = document.querySelector(\"#close\");\n  const swapBtn = document.querySelector(\"#swap\");\n  const defaultImage = document.getElementById(\"original-image\");\n  const beforeImage = document.querySelector(\"#beforeImage\");\n  const beforeImageSwap = document.querySelector(\"#beforeImageSwap\");\n  const colorSizeElm = document.querySelector(\"#colorSize\");\n  const spinnerElm = document.querySelector(\"#spinner\");\n\n  const cluster = new Cluster({ canvas });\n\n  uploadArea.addEventListener(\"change\", (e) => {\n    showPreviewArea();\n    changeHandler({\n      e,\n      callback: (image) => {\n        preview(image);\n      },\n    });\n  });\n  uploadArea.addEventListener(\"dragenter\", (e) => {\n    e.preventDefault();\n  });\n  uploadArea.addEventListener(\"dragover\", (e) => {\n    e.preventDefault();\n  });\n  uploadArea.addEventListener(\"dragleave\", (e) => {\n    e.preventDefault();\n  });\n  uploadArea.addEventListener(\"drop\", (e) => {\n    e.preventDefault();\n    showPreviewArea();\n    changeHandler({\n      e,\n      data: e.dataTransfer.files[0],\n      callback: (image) => {\n        preview(image);\n      },\n    });\n  });\n\n  closeBtn.addEventListener(\"click\", () => {\n    resetPreview(beforeImage);\n  });\n\n  swapBtn.addEventListener(\"click\", () => {\n    swapImage();\n  });\n\n  colorSizeElm.addEventListener(\"change\", (e) => {\n    showSpinner();\n    cluster.reduce(Number(e.target.value));\n  });\n\n  const swapImage = () => {\n    if (canvas.classList.contains(\"hidden\")) {\n      canvas.classList.remove(\"hidden\");\n      beforeImageSwap.classList.add(\"hidden\");\n    } else {\n      canvas.classList.add(\"hidden\");\n      beforeImageSwap.classList.remove(\"hidden\");\n    }\n  };\n\n  const showPreviewArea = () => {\n    uploadElm.classList.add(\"hidden\");\n    uploadedElm.classList.remove(\"hidden\");\n  };\n\n  const hidePreviewArea = () => {\n    uploadElm.classList.remove(\"hidden\");\n    uploadedElm.classList.add(\"hidden\");\n  };\n\n  const preview = (image) => {\n    showSpinner();\n    cluster.reduce(4, image);\n    beforeImage.src = image.src;\n    beforeImageSwap.src = image.src;\n    showPreviewArea();\n  };\n\n  const resetPreview = () => {\n    cluster.restore();\n    beforeImage.src = \"\";\n    beforeImageSwap.src = \"\";\n    colorSizeElm.value = 4;\n    hidePreviewArea();\n  };\n\n  const showSpinner = () => {\n    canvas.classList.add('opacity-25');\n    spinnerElm.classList.remove('hidden');\n  };\n\n  const hideSpinner = () => {\n    canvas.classList.remove('opacity-25');\n    spinnerElm.classList.add('hidden');\n\n  };\n\n  worker.addEventListener('message', (response) => {\n    cluster.draw(response.data);\n    hideSpinner();\n  });\n\n  showPreviewArea();\n  defaultImage.addEventListener(\"load\", (image) => {\n    preview(defaultImage);\n  });\n});\n\nconst changeHandler = ({ e, data, callback }) => {\n  // drag and dropの場合は e.dataTransfer.files[0] を使用\n  let file = data === undefined ? e.target.files[0] : data;\n\n  // 拡張子チェック\n  if (!file.type.match(/^image\\/(png|jpg|jpeg|gif)$/)) {\n    return;\n  }\n\n  // 容量チェック(5MB)\n  if (5 * 1024 * 1024 <= file.size) {\n    return;\n  }\n\n  let image = new Image();\n  let fileReader = new FileReader();\n\n  fileReader.onload = (e) => {\n    let base64 = e.target.result;\n\n    image.onload = () => {\n      callback(image);\n    };\n    image.src = base64;\n  };\n\n  fileReader.readAsDataURL(file);\n};\n\nexport default class Cluster {\n  constructor({ canvas }) {\n    this.canvas = canvas;\n    this.__image = null;\n  }\n\n  restore() {\n    const ctx = this.canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  reduce(size = 2, image) {\n    if (!!image) {\n      this.__image = image;\n    }\n    this.canvas.width = this.__image.width;\n    this.canvas.height = this.__image.height;\n    const ctx = this.canvas.getContext(\"2d\");\n    ctx.drawImage(\n      this.__image,\n      0,\n      0,\n      this.__image.width,\n      this.__image.height,\n      0,\n      0,\n      this.__image.width,\n      this.__image.height\n    );\n\n    let imageData = ctx.getImageData(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height\n    );\n    worker.postMessage({ imageData, size }, [imageData.data.buffer]);\n  }\n\n  draw(imageData) {\n    const ctx = this.canvas.getContext(\"2d\");\n    ctx.putImageData(imageData, 0, 0, 0, 0, imageData.width, imageData.height);\n  }\n}\n"]}