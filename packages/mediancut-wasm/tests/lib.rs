// src/lib.rsをexternしてテストする
extern crate mediancut_wasm;

#[test]
fn test_calculate_count() {
    // 10x10の赤→青→緑のグラデーション
    let image_data: Vec<u8> = vec![
        229, 0, 25, 255, 204, 1, 51, 255, 179, 0, 76, 255, 154, 1, 101, 254, 127, 0,
        127, 255, 101, 0, 153, 255, 75, 0, 179, 255, 50, 0, 204, 255, 25, 1, 230, 255,
        4, 5, 247, 255, 204, 0, 51, 255, 179, 1, 76, 254, 153, 0, 102, 255, 127, 0,
        127, 255, 101, 0, 153, 255, 76, 1, 179, 255, 51, 1, 204, 255, 25, 0, 230, 255,
        5, 5, 247, 255, 1, 26, 229, 255, 178, 0, 76, 255, 153, 1, 102, 255, 128, 0,
        128, 255, 102, 1, 153, 255, 76, 1, 179, 255, 51, 1, 205, 255, 25, 1, 230, 255,
        4, 4, 246, 255, 1, 27, 229, 255, 1, 51, 203, 255, 153, 0, 102, 255, 128, 1,
        128, 255, 101, 0, 153, 255, 76, 1, 179, 255, 51, 1, 205, 255, 25, 1, 230, 255,
        4, 4, 247, 255, 1, 26, 229, 255, 0, 52, 204, 255, 0, 77, 178, 255, 128, 1,
        128, 254, 101, 0, 153, 255, 76, 0, 179, 255, 50, 1, 204, 255, 25, 0, 230, 255,
        4, 4, 246, 255, 0, 26, 229, 255, 0, 52, 203, 255, 1, 77, 178, 255, 0, 103,
        153, 255, 101, 0, 153, 255, 76, 0, 179, 255, 50, 0, 204, 255, 25, 0, 230, 255,
        4, 5, 247, 255, 0, 26, 229, 255, 0, 51, 203, 255, 0, 77, 178, 255, 0, 102,
        153, 255, 0, 128, 127, 255, 76, 0, 179, 255, 51, 0, 204, 255, 24, 0, 230, 255,
        4, 5, 246, 255, 1, 26, 229, 255, 0, 51, 203, 255, 1, 77, 178, 255, 0, 103,
        153, 255, 0, 128, 127, 255, 1, 153, 102, 255, 50, 0, 204, 255, 25, 0, 230,
        255, 3, 4, 246, 255, 0, 26, 229, 255, 1, 51, 203, 255, 0, 77, 178, 255, 0,
        102, 152, 255, 0, 128, 127, 255, 0, 153, 102, 255, 0, 179, 76, 255, 25, 0,
        230, 255, 4, 4, 246, 255, 0, 26, 229, 255, 0, 51, 203, 255, 0, 77, 178, 255,
        1, 103, 153, 255, 0, 128, 127, 255, 0, 153, 101, 255, 1, 180, 76, 255, 0, 204,
        51, 255, 4, 4, 246, 255, 0, 26, 229, 255, 0, 51, 203, 255, 0, 77, 178, 255, 0,
        102, 153, 255, 0, 128, 127, 255, 0, 153, 101, 255, 1, 179, 76, 255, 1, 204,
        50, 255, 1, 230, 26, 255,
    ];
    let result = mediancut_wasm::calculate_count(&image_data);
    assert_eq!(result, [
        mediancut_wasm::Colors(229, 0, 25, 1),
        mediancut_wasm::Colors(1, 230, 26, 1),
        mediancut_wasm::Colors(1, 204, 50, 1),
        mediancut_wasm::Colors(204, 0, 51, 1),
        mediancut_wasm::Colors(204, 1, 51, 1),
        mediancut_wasm::Colors(0, 204, 51, 1),
        mediancut_wasm::Colors(178, 0, 76, 1),
        mediancut_wasm::Colors(179, 0, 76, 1),
        mediancut_wasm::Colors(179, 1, 76, 1),
        mediancut_wasm::Colors(0, 179, 76, 1),
        mediancut_wasm::Colors(1, 179, 76, 1),
        mediancut_wasm::Colors(1, 180, 76, 1),
        mediancut_wasm::Colors(154, 1, 101, 1),
        mediancut_wasm::Colors(0, 153, 101, 2),
        mediancut_wasm::Colors(153, 0, 102, 2),
        mediancut_wasm::Colors(153, 1, 102, 1),
        mediancut_wasm::Colors(0, 153, 102, 1),
        mediancut_wasm::Colors(1, 153, 102, 1),
        mediancut_wasm::Colors(127, 0, 127, 2),
        mediancut_wasm::Colors(0, 128, 127, 5),
        mediancut_wasm::Colors(128, 0, 128, 1),
        mediancut_wasm::Colors(128, 1, 128, 2),
        mediancut_wasm::Colors(0, 102, 152, 1),
        mediancut_wasm::Colors(101, 0, 153, 5),
        mediancut_wasm::Colors(102, 1, 153, 1),
        mediancut_wasm::Colors(0, 102, 153, 2),
        mediancut_wasm::Colors(0, 103, 153, 2),
        mediancut_wasm::Colors(1, 103, 153, 1),
        mediancut_wasm::Colors(0, 77, 178, 5),
        mediancut_wasm::Colors(1, 77, 178, 2),
        mediancut_wasm::Colors(75, 0, 179, 1),
        mediancut_wasm::Colors(76, 0, 179, 3),
        mediancut_wasm::Colors(76, 1, 179, 3),
        mediancut_wasm::Colors(0, 51, 203, 4),
        mediancut_wasm::Colors(1, 51, 203, 2),
        mediancut_wasm::Colors(0, 52, 203, 1),
        mediancut_wasm::Colors(50, 0, 204, 3),
        mediancut_wasm::Colors(51, 0, 204, 1),
        mediancut_wasm::Colors(50, 1, 204, 1),
        mediancut_wasm::Colors(51, 1, 204, 1),
        mediancut_wasm::Colors(0, 52, 204, 1),
        mediancut_wasm::Colors(51, 1, 205, 2),
        mediancut_wasm::Colors(0, 26, 229, 5),
        mediancut_wasm::Colors(1, 26, 229, 3),
        mediancut_wasm::Colors(1, 27, 229, 1),
        mediancut_wasm::Colors(24, 0, 230, 1),
        mediancut_wasm::Colors(25, 0, 230, 5),
        mediancut_wasm::Colors(25, 1, 230, 3),
        mediancut_wasm::Colors(3, 4, 246, 1),
        mediancut_wasm::Colors(4, 4, 246, 4),
        mediancut_wasm::Colors(4, 5, 246, 1),
        mediancut_wasm::Colors(4, 4, 247, 1),
        mediancut_wasm::Colors(4, 5, 247, 2),
        mediancut_wasm::Colors(5, 5, 247, 1)
    ]
    );
}

#[test]
fn test_average_color() {
    let colors: Vec<mediancut_wasm::Colors> = vec![
        mediancut_wasm::Colors(229, 0, 25, 1),
        mediancut_wasm::Colors(179, 0, 76, 1),
        mediancut_wasm::Colors(127, 0, 127, 2),
        mediancut_wasm::Colors(101, 0, 153, 5),
        mediancut_wasm::Colors(75, 0, 179, 1),
        mediancut_wasm::Colors(50, 0, 204, 3),
        mediancut_wasm::Colors(204, 0, 51, 1),
        mediancut_wasm::Colors(153, 0, 102, 2),
        mediancut_wasm::Colors(25, 0, 230, 5),
        mediancut_wasm::Colors(178, 0, 76, 1),
        mediancut_wasm::Colors(128, 0, 128, 1),
        mediancut_wasm::Colors(76, 0, 179, 3),
        mediancut_wasm::Colors(51, 0, 204, 1),
        mediancut_wasm::Colors(24, 0, 230, 1),
        mediancut_wasm::Colors(204, 1, 51, 1),
        mediancut_wasm::Colors(154, 1, 101, 1),
        mediancut_wasm::Colors(25, 1, 230, 3),
        mediancut_wasm::Colors(179, 1, 76, 1),
        mediancut_wasm::Colors(76, 1, 179, 3),
        mediancut_wasm::Colors(51, 1, 204, 1),
        mediancut_wasm::Colors(153, 1, 102, 1),
        mediancut_wasm::Colors(102, 1, 153, 1),
        mediancut_wasm::Colors(51, 1, 205, 2),
        mediancut_wasm::Colors(128, 1, 128, 2),
        mediancut_wasm::Colors(50, 1, 204, 1),
        mediancut_wasm::Colors(4, 4, 246, 4),
        mediancut_wasm::Colors(4, 4, 247, 1),
        mediancut_wasm::Colors(3, 4, 246, 1),
        mediancut_wasm::Colors(4, 5, 247, 2),
        mediancut_wasm::Colors(5, 5, 247, 1),
        mediancut_wasm::Colors(4, 5, 246, 1),
        mediancut_wasm::Colors(1, 26, 229, 3),
        mediancut_wasm::Colors(0, 26, 229, 5),
        mediancut_wasm::Colors(1, 27, 229, 1),
        mediancut_wasm::Colors(1, 51, 203, 2),
        mediancut_wasm::Colors(0, 51, 203, 4),
        mediancut_wasm::Colors(0, 52, 204, 1),
        mediancut_wasm::Colors(0, 52, 203, 1),
        mediancut_wasm::Colors(0, 77, 178, 5),
        mediancut_wasm::Colors(1, 77, 178, 2),
        mediancut_wasm::Colors(0, 102, 153, 2),
        mediancut_wasm::Colors(0, 102, 152, 1),
        mediancut_wasm::Colors(0, 103, 153, 2),
        mediancut_wasm::Colors(1, 103, 153, 1),
        mediancut_wasm::Colors(0, 128, 127, 5),
        mediancut_wasm::Colors(1, 153, 102, 1),
        mediancut_wasm::Colors(0, 153, 102, 1),
        mediancut_wasm::Colors(0, 153, 101, 2),
        mediancut_wasm::Colors(0, 179, 76, 1),
        mediancut_wasm::Colors(1, 179, 76, 1),
        mediancut_wasm::Colors(1, 180, 76, 1),
        mediancut_wasm::Colors(0, 204, 51, 1),
        mediancut_wasm::Colors(1, 204, 50, 1),
        mediancut_wasm::Colors(1, 230, 26, 1),
    ];
    let result = mediancut_wasm::average_color(colors.clone());
    assert_eq!(result, (42, 43, 170));
}

// #[test]
// fn test_get_total_and_greatest_range_channel() {
//     let colors: Vec<Colors> = vec![
//         mediancut_wasm::Colors(229, 0, 25, 1),
//         mediancut_wasm::Colors(179, 0, 76, 1),
//         mediancut_wasm::Colors(127, 0, 127, 2),
//         mediancut_wasm::Colors(101, 0, 153, 5),
//         mediancut_wasm::Colors(75, 0, 179, 1),
//         mediancut_wasm::Colors(50, 0, 204, 3),
//         mediancut_wasm::Colors(204, 0, 51, 1),
//         mediancut_wasm::Colors(153, 0, 102, 2),
//         mediancut_wasm::Colors(25, 0, 230, 5),
//         mediancut_wasm::Colors(178, 0, 76, 1),
//         mediancut_wasm::Colors(128, 0, 128, 1),
//         mediancut_wasm::Colors(76, 0, 179, 3),
//         mediancut_wasm::Colors(51, 0, 204, 1),
//         mediancut_wasm::Colors(24, 0, 230, 1),
//         mediancut_wasm::Colors(204, 1, 51, 1),
//         mediancut_wasm::Colors(154, 1, 101, 1),
//         mediancut_wasm::Colors(25, 1, 230, 3),
//         mediancut_wasm::Colors(179, 1, 76, 1),
//         mediancut_wasm::Colors(76, 1, 179, 3),
//         mediancut_wasm::Colors(51, 1, 204, 1),
//         mediancut_wasm::Colors(153, 1, 102, 1),
//         mediancut_wasm::Colors(102, 1, 153, 1),
//         mediancut_wasm::Colors(51, 1, 205, 2),
//         mediancut_wasm::Colors(128, 1, 128, 2),
//         mediancut_wasm::Colors(50, 1, 204, 1),
//         mediancut_wasm::Colors(4, 4, 246, 4),
//         mediancut_wasm::Colors(4, 4, 247, 1),
//         mediancut_wasm::Colors(3, 4, 246, 1),
//         mediancut_wasm::Colors(4, 5, 247, 2),
//         mediancut_wasm::Colors(5, 5, 247, 1),
//         mediancut_wasm::Colors(4, 5, 246, 1),
//         mediancut_wasm::Colors(1, 26, 229, 3),
//         mediancut_wasm::Colors(0, 26, 229, 5),
//         mediancut_wasm::Colors(1, 27, 229, 1),
//         mediancut_wasm::Colors(1, 51, 203, 2),
//         mediancut_wasm::Colors(0, 51, 203, 4),
//         mediancut_wasm::Colors(0, 52, 204, 1),
//         mediancut_wasm::Colors(0, 52, 203, 1),
//         mediancut_wasm::Colors(0, 77, 178, 5),
//         mediancut_wasm::Colors(1, 77, 178, 2),
//         mediancut_wasm::Colors(0, 102, 153, 2),
//         mediancut_wasm::Colors(0, 102, 152, 1),
//         mediancut_wasm::Colors(0, 103, 153, 2),
//         mediancut_wasm::Colors(1, 103, 153, 1),
//         mediancut_wasm::Colors(0, 128, 127, 5),
//         mediancut_wasm::Colors(1, 153, 102, 1),
//         mediancut_wasm::Colors(0, 153, 102, 1),
//         mediancut_wasm::Colors(0, 153, 101, 2),
//         mediancut_wasm::Colors(0, 179, 76, 1),
//         mediancut_wasm::Colors(1, 179, 76, 1),
//         mediancut_wasm::Colors(1, 180, 76, 1),
//         mediancut_wasm::Colors(0, 204, 51, 1),
//         mediancut_wasm::Colors(1, 204, 50, 1),
//         mediancut_wasm::Colors(1, 230, 26, 1),
//     ];
//     let result = get_total_and_greatest_range_channel(colors.clone());
//     assert_eq!(result, Bucket {
//         colors: vec![mediancut_wasm::Colors(229, 0, 25, 1), mediancut_wasm::Colors(179, 0, 76, 1), mediancut_wasm::Colors(127, 0, 127, 2), mediancut_wasm::Colors(101, 0, 153, 5), mediancut_wasm::Colors(75, 0, 179, 1), mediancut_wasm::Colors(50, 0, 204, 3), mediancut_wasm::Colors(204, 0, 51, 1), mediancut_wasm::Colors(153, 0, 102, 2), mediancut_wasm::Colors(25, 0, 230, 5), mediancut_wasm::Colors(178, 0, 76, 1), mediancut_wasm::Colors(128, 0, 128, 1), mediancut_wasm::Colors(76, 0, 179, 3), mediancut_wasm::Colors(51, 0, 204, 1), mediancut_wasm::Colors(24, 0, 230, 1), mediancut_wasm::Colors(204, 1, 51, 1), mediancut_wasm::Colors(154, 1, 101, 1), mediancut_wasm::Colors(25, 1, 230, 3), mediancut_wasm::Colors(179, 1, 76, 1), mediancut_wasm::Colors(76, 1, 179, 3), mediancut_wasm::Colors(51, 1, 204, 1), mediancut_wasm::Colors(153, 1, 102, 1), mediancut_wasm::Colors(102, 1, 153, 1), mediancut_wasm::Colors(51, 1, 205, 2), mediancut_wasm::Colors(128, 1, 128, 2), mediancut_wasm::Colors(50, 1, 204, 1), mediancut_wasm::Colors(4, 4, 246, 4), mediancut_wasm::Colors(4, 4, 247, 1), mediancut_wasm::Colors(3, 4, 246, 1), mediancut_wasm::Colors(4, 5, 247, 2), mediancut_wasm::Colors(5, 5, 247, 1), mediancut_wasm::Colors(4, 5, 246, 1), mediancut_wasm::Colors(1, 26, 229, 3), mediancut_wasm::Colors(0, 26, 229, 5), mediancut_wasm::Colors(1, 27, 229, 1), mediancut_wasm::Colors(1, 51, 203, 2), mediancut_wasm::Colors(0, 51, 203, 4), mediancut_wasm::Colors(0, 52, 204, 1), mediancut_wasm::Colors(0, 52, 203, 1), mediancut_wasm::Colors(0, 77, 178, 5), mediancut_wasm::Colors(1, 77, 178, 2), mediancut_wasm::Colors(0, 102, 153, 2), mediancut_wasm::Colors(0, 102, 152, 1), mediancut_wasm::Colors(0, 103, 153, 2), mediancut_wasm::Colors(1, 103, 153, 1), mediancut_wasm::Colors(0, 128, 127, 5), mediancut_wasm::Colors(1, 153, 102, 1), mediancut_wasm::Colors(0, 153, 102, 1), mediancut_wasm::Colors(0, 153, 101, 2), mediancut_wasm::Colors(0, 179, 76, 1), mediancut_wasm::Colors(1, 179, 76, 1), mediancut_wasm::Colors(1, 180, 76, 1), mediancut_wasm::Colors(0, 204, 51, 1), mediancut_wasm::Colors(1, 204, 50, 1), mediancut_wasm::Colors(1, 230, 26, 1)],
//         total: 100,
//         channel: Channel::G,
//         min_r: 0,
//         min_g: 0,
//         min_b: 25,
//         max_r: 229,
//         max_g: 230,
//         max_b: 247,
//     }
//     );
// }
//
// #[test]
// fn test_fact() {
//     let buckets = fact(vec![Bucket {
//         colors: vec![mediancut_wasm::Colors(229, 0, 25, 1), mediancut_wasm::Colors(179, 0, 76, 1), mediancut_wasm::Colors(127, 0, 127, 2), mediancut_wasm::Colors(101, 0, 153, 5), mediancut_wasm::Colors(75, 0, 179, 1), mediancut_wasm::Colors(50, 0, 204, 3), mediancut_wasm::Colors(204, 0, 51, 1), mediancut_wasm::Colors(153, 0, 102, 2), mediancut_wasm::Colors(25, 0, 230, 5), mediancut_wasm::Colors(178, 0, 76, 1), mediancut_wasm::Colors(128, 0, 128, 1), mediancut_wasm::Colors(76, 0, 179, 3), mediancut_wasm::Colors(51, 0, 204, 1), mediancut_wasm::Colors(24, 0, 230, 1), mediancut_wasm::Colors(204, 1, 51, 1), mediancut_wasm::Colors(154, 1, 101, 1), mediancut_wasm::Colors(25, 1, 230, 3), mediancut_wasm::Colors(179, 1, 76, 1), mediancut_wasm::Colors(76, 1, 179, 3), mediancut_wasm::Colors(51, 1, 204, 1), mediancut_wasm::Colors(153, 1, 102, 1), mediancut_wasm::Colors(102, 1, 153, 1), mediancut_wasm::Colors(51, 1, 205, 2), mediancut_wasm::Colors(128, 1, 128, 2), mediancut_wasm::Colors(50, 1, 204, 1), mediancut_wasm::Colors(4, 4, 246, 4), mediancut_wasm::Colors(4, 4, 247, 1), mediancut_wasm::Colors(3, 4, 246, 1), mediancut_wasm::Colors(4, 5, 247, 2), mediancut_wasm::Colors(5, 5, 247, 1), mediancut_wasm::Colors(4, 5, 246, 1), mediancut_wasm::Colors(1, 26, 229, 3), mediancut_wasm::Colors(0, 26, 229, 5), mediancut_wasm::Colors(1, 27, 229, 1), mediancut_wasm::Colors(1, 51, 203, 2), mediancut_wasm::Colors(0, 51, 203, 4), mediancut_wasm::Colors(0, 52, 204, 1), mediancut_wasm::Colors(0, 52, 203, 1), mediancut_wasm::Colors(0, 77, 178, 5), mediancut_wasm::Colors(1, 77, 178, 2), mediancut_wasm::Colors(0, 102, 153, 2), mediancut_wasm::Colors(0, 102, 152, 1), mediancut_wasm::Colors(0, 103, 153, 2), mediancut_wasm::Colors(1, 103, 153, 1), mediancut_wasm::Colors(0, 128, 127, 5), mediancut_wasm::Colors(1, 153, 102, 1), mediancut_wasm::Colors(0, 153, 102, 1), mediancut_wasm::Colors(0, 153, 101, 2), mediancut_wasm::Colors(0, 179, 76, 1), mediancut_wasm::Colors(1, 179, 76, 1), mediancut_wasm::Colors(1, 180, 76, 1), mediancut_wasm::Colors(0, 204, 51, 1), mediancut_wasm::Colors(1, 204, 50, 1), mediancut_wasm::Colors(1, 230, 26, 1)],
//         total: 100,
//         channel: Channel::G,
//         min_r: 0,
//         min_g: 0,
//         min_b: 25,
//         max_r: 229,
//         max_g: 230,
//         max_b: 247,
//     }], 12);
//
//     let result = fact(buckets, 12);
//
//     println!("{:?}", result);
//
//     let buckets: Vec<Bucket> = vec![
//         Bucket { colors: vec![mediancut_wasm::Colors(3, 4, 246, 1), mediancut_wasm::Colors(4, 4, 246, 4), mediancut_wasm::Colors(24, 0, 230, 1), mediancut_wasm::Colors(25, 0, 230, 5)], total: 11, channel: Channel::R, min_r: 3, min_g: 0, min_b: 230, max_r: 25, max_g: 4, max_b: 246 },
//         Bucket { colors: vec![mediancut_wasm::Colors(25, 1, 230, 3), mediancut_wasm::Colors(50, 0, 204, 3), mediancut_wasm::Colors(50, 1, 204, 1)], total: 7, channel: Channel::R, min_r: 25, min_g: 0, min_b: 204, max_r: 50, max_g: 1, max_b: 230 },
//         Bucket { colors: vec![mediancut_wasm::Colors(51, 0, 204, 1), mediancut_wasm::Colors(51, 1, 204, 1), mediancut_wasm::Colors(51, 1, 205, 2), mediancut_wasm::Colors(75, 0, 179, 1)], total: 5, channel: Channel::R, min_r: 51, min_g: 0, min_b: 179, max_r: 75, max_g: 1, max_b: 205 },
//         Bucket { colors: vec![mediancut_wasm::Colors(76, 0, 179, 3), mediancut_wasm::Colors(76, 1, 179, 3), mediancut_wasm::Colors(101, 0, 153, 5)], total: 11, channel: Channel::R, min_r: 76, min_g: 0, min_b: 153, max_r: 101, max_g: 1, max_b: 179 },
//         Bucket { colors: vec![mediancut_wasm::Colors(102, 1, 153, 1), mediancut_wasm::Colors(127, 0, 127, 2), mediancut_wasm::Colors(128, 0, 128, 1), mediancut_wasm::Colors(128, 1, 128, 2), mediancut_wasm::Colors(153, 0, 102, 2), mediancut_wasm::Colors(153, 1, 102, 1), mediancut_wasm::Colors(154, 1, 101, 1)], total: 10, channel: Channel::R, min_r: 102, min_g: 0, min_b: 101, max_r: 154, max_g: 1, max_b: 153 },
//         Bucket { colors: vec![mediancut_wasm::Colors(178, 0, 76, 1), mediancut_wasm::Colors(179, 0, 76, 1), mediancut_wasm::Colors(179, 1, 76, 1), mediancut_wasm::Colors(204, 0, 51, 1), mediancut_wasm::Colors(204, 1, 51, 1), mediancut_wasm::Colors(229, 0, 25, 1)], total: 6, channel: Channel::R, min_r: 178, min_g: 0, min_b: 25, max_r: 229, max_g: 1, max_b: 76 },
//         Bucket { colors: vec![mediancut_wasm::Colors(4, 4, 247, 1), mediancut_wasm::Colors(4, 5, 246, 1), mediancut_wasm::Colors(4, 5, 247, 2), mediancut_wasm::Colors(5, 5, 247, 1)], total: 5, channel: Channel::G, min_r: 4, min_g: 4, min_b: 246, max_r: 5, max_g: 5, max_b: 247 },
//         Bucket { colors: vec![mediancut_wasm::Colors(0, 26, 229, 5), mediancut_wasm::Colors(1, 26, 229, 3), mediancut_wasm::Colors(1, 27, 229, 1)], total: 9, channel: Channel::G, min_r: 0, min_g: 26, min_b: 229, max_r: 1, max_g: 27, max_b: 229 },
//         Bucket { colors: vec![mediancut_wasm::Colors(0, 51, 203, 4), mediancut_wasm::Colors(1, 51, 203, 2), mediancut_wasm::Colors(0, 52, 203, 1), mediancut_wasm::Colors(0, 52, 204, 1)], total: 8, channel: Channel::G, min_r: 0, min_g: 51, min_b: 203, max_r: 1, max_g: 52, max_b: 204 },
//         Bucket { colors: vec![mediancut_wasm::Colors(0, 77, 178, 5), mediancut_wasm::Colors(1, 77, 178, 2), mediancut_wasm::Colors(0, 102, 152, 1)], total: 8, channel: Channel::G, min_r: 0, min_g: 77, min_b: 152, max_r: 1, max_g: 102, max_b: 178 },
//         Bucket { colors: vec![mediancut_wasm::Colors(0, 102, 153, 2), mediancut_wasm::Colors(0, 103, 153, 2), mediancut_wasm::Colors(1, 103, 153, 1), mediancut_wasm::Colors(0, 128, 127, 5), mediancut_wasm::Colors(0, 153, 101, 2), mediancut_wasm::Colors(0, 153, 102, 1), mediancut_wasm::Colors(1, 153, 102, 1)], total: 14, channel: Channel::G, min_r: 0, min_g: 102, min_b: 101, max_r: 1, max_g: 153, max_b: 153 },
//         Bucket { colors: vec![mediancut_wasm::Colors(0, 179, 76, 1), mediancut_wasm::Colors(1, 179, 76, 1), mediancut_wasm::Colors(1, 180, 76, 1), mediancut_wasm::Colors(1, 204, 50, 1), mediancut_wasm::Colors(0, 204, 51, 1), mediancut_wasm::Colors(1, 230, 26, 1)], total: 6, channel: Channel::G, min_r: 0, min_g: 179, min_b: 26, max_r: 1, max_g: 230, max_b: 76 }];
//     assert_eq!(result, buckets);
// }
